{
  "manifest": {
    "name": "babel-template",
    "version": "6.24.1",
    "description": "Generate an AST from a string template.",
    "author": {
      "name": "Sebastian McKenzie",
      "email": "sebmck@gmail.com"
    },
    "homepage": "https://babeljs.io/",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/babel/babel/tree/master/packages/babel-template"
    },
    "main": "lib/index.js",
    "dependencies": {
      "babylon": "^6.11.0",
      "babel-traverse": "^6.24.1",
      "babel-types": "^6.24.1",
      "babel-runtime": "^6.22.0",
      "lodash": "^4.2.0"
    },
    "_registry": "npm",
    "_loc": "/home/f/frtn7/frtn7.beget.tech/public_html/.cache/yarn/v6/npm-babel-template-6.24.1-04ae514f1f93b3a2537f2a0f60a5a45fb8308333/node_modules/babel-template/package.json",
    "readmeFilename": "README.md",
    "readme": "# babel-template\n\n> Generate an AST from a string template.\n\nIn computer science, this is known as an implementation of quasiquotes.\n\n## Install\n\n```sh\nnpm install --save-dev babel-template\n```\n\n## Usage\n\n```js\nimport template from \"babel-template\";\nimport generate from \"babel-generator\";\nimport * as t from \"babel-types\";\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n  SOURCE: t.stringLiteral(\"my-module\")\n});\n\nconsole.log(generate(ast).code);\n```\n\n```js\nconst myModule = require(\"my-module\");\n```\n\n## API\n\n### `template(code, [opts])`\n\n#### code\n\nType: `string`\n\n#### options\n\n`babel-template` accepts all of the options from [babylon], and specifies\nsome defaults of its own:\n\n* `allowReturnOutsideFunction` is set to `true` by default.\n* `allowSuperOutsideMethod` is set to `true` by default.\n\n##### preserveComments\n\nType: `boolean`\nDefault: `false`\n\nSet this to `true` to preserve any comments from the `code` parameter.\n\n#### Return value\n\n`babel-template` returns a `function` which is invoked with an optional object\nof replacements. See the usage section for an example.\n\n[babylon]: https://github.com/babel/babylon#options\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/babel-template/-/babel-template-6.24.1.tgz#04ae514f1f93b3a2537f2a0f60a5a45fb8308333",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/babel-template/-/babel-template-6.24.1.tgz",
    "hash": "04ae514f1f93b3a2537f2a0f60a5a45fb8308333",
    "registry": "npm",
    "packageName": "babel-template",
    "cacheIntegrity": "sha512-eLYCmQldaoRCcb1C1DjNiKTAzkZjPot+hkCGW4T6LHV/wxIg5WXLpnQ6V0+6ClIz0tSJgVa+QaH6gNtZJVwRsg== sha1-BK5RTx+Ts6JTfyoPYKWkX7gwgzM="
  },
  "registry": "npm",
  "hash": "04ae514f1f93b3a2537f2a0f60a5a45fb8308333"
}